 
                #### CHECKLIST
                Citare con precisione gli articoli, commi e lettere delle fonti di regolazione.Citare prima le norme di legittimazione e poi le norme procedurali del caso in specie [RISPONDI CON: SI/NO/CARENTE]

Applicazione delle normative pertinenti alla fattispecie, tenuto conto delle sopravvenute disposizioni vigenti:
1. D.lgs 267/2000 ( art. 107 c. 2, lettera... art 109...)  183 e 191)
2. D.Lgs 163/2006 s.m.i.  e/o contratto servizio escluso
3. R.D.  n. 2440/1924  per affidamenti cui non si applica il Codice dei Contratti
4. DPR  207/2010, art.. (indicare istituto specifico)
5. Normativa sulla privacy nel testo dei provvedimenti e nelle procedure adottate (art. 20 e 21 D.Lgs. 196/2003)
6. Eventuali altre normative generali e/o di specificazione
                
                ### RESPONSE
                 
1. Rispettato
2. Rispettato, la norma è citata al interno della determina
3. Rispettato, la norma è citata al interno della determina
4. Rispettato, la norma è citata al interno della determina
5. Non Rispettato, la norma non è citata e non è rilevante
6. Rispettato, la norma è citata al interno della determina
7. Non Rispettato, la norma non è citata e non è rilevante
8. Rispettato, la norma è citata al interno della determina
9. Rispettato, la norma non è rilevante
10. Rispettato, la norma è citata al interno della determina
11. Non Rispettato, la norma non è citata e non è rilevante
12. Rispettato, la norma è citata al interno della determina, la norma è citata come "art. 147 bis" e non come "art. 26 bis" quindi non è rispettato in senso stretto ma è rilevante il fatto che la norma citata è simile.  '''  # noqa: E501

    """

    import re
    from difflib import SequenceMatcher

    def similar(a, b):
        return SequenceMatcher(None, a, b).ratio()

    def check_citation(determina, norma):
        if similar(norma, re.sub(r'\d{4}/\d{1,2}/\d{1,2} a \d{1,2}:\d{2} il \d{4}/\d{2}/\d{2} Dott.Ssa Erminia Vittoria Zoppè il Direttore'\
           .replace(' ', '').replace('\n','').replace('<','' ).replace('>','').replace('/','').replace('.','').replace(',','').replace(';','').replace(':','').replace('-',''), determina) in norma):
            return 'Rispettato'
        else:
            return 'Non Rispet
                 
                #### CHECKLIST
                Citare con precisione gli articoli, commi e lettere delle fonti di regolazione.Citare prima le norme di legittimazione e poi le norme procedurali del caso in specie[RISPONDI CON: SI/NO/CARENTE]

Conformità norme regolamentari e osservanza di atti amministrativi interni a valenza regolamentare:
1.Statuto
2.Regolamento sull'ordinamento degli uffici e dei Servizi -(DG n. 9 del 29/1/2014) 
3.Regolamento di contabilità  
4.Regolamento in materia di controlli 
5.D.G. n. 25 del 30.9.2009 "Linee operative e indirizzo d'applicazione normaiva delle procedure in economia"
                
                ### RESPONSE
                 
1. Rispettato
2. Rispettato
3. Rispettato
4. Rispettato, la norma è citata al interno della determina
5. Non Rispettato, la norma non è citata e non è rilevante
6. Rispettato, la norma è citata al interno della determina
7. Non Rispettato, la norma non è citata e non è rilevante
8. Rispettato, la norma è citata al interno della determina
9. Rispettato, la norma è citata al interno della determina
10. Rispettato, la norma è citata al interno della determina
11. Rispettato, la norma non è rilevante
12. Rispettato, la norma non è rilevante
    """


if __name__ == "__main__":
    with open('determina.txt', 'r', encoding='utf-8') as file:
        determina = file.read()
    output = []
    for i, norma in enumerate(['D.lgs 267/2000', 'art. 26 bis']):
        if norma in determina:
            output.append(f'{i+3}. Rispettato')
        else:
            output.append(f'{i+3}. Non Rispettato, la norma non è citata e {"" if not i else "non "} è rilevante')
    print('\n'.join(output))  # stampa l'output desiderato in formato testo semplice, una riga per ogni esito di verifica di rispetto della norma.
                 
                #### CHECKLIST
                Citare con precisione, sempre, le deliberazioni  a contenuto programmatico: Bilancio di previsione, PEG (comprese modifiche/variazioni intervenute nell'anno, Bilancio pluriennale). Quando le  procedure vengono effettuate mediante prenotazione di spesa per commesse  relative all'esercizio successivo, citare l'annualità del bilancio pluriennale in corso, con riferimento all'oggetto del contratto.

Conformità al programma di mandato, Piano Esecutivo di Gestione, atti di programmazione
1.Regolarità delle procedure, correttezza formale nei provvedimenti emessi
2.Coerenza dei dati riportati nei provvedimenti e nei relativi allegati
                
                ### RESPONSE
                 
Non rispettati: 1, Rispettati: 2
    ''')

    def test_check_norme(self):
        determina = Determina()
        determina.text = self.example_text
        output = determina.check_norme()
        self.assertEqual(output, 'Non rispettati: 1, Rispettati: 2')  # test the output

    def test_init(self):
        determina = Determina()
        self.assertIsNone(determina.text)  # test the initial state of the text attribute

    def test_set_text(self):
        determina = Determina()
        determina.text = self.example_text
        self.assertEqual(determina.text, self.example_text)  # test the setting of the text attribute

if __name__ == '__main__':
    unittest.main()  # run the tests
```



This test suite checks the functionality of the `Determina` class, which is designed to analyze a text representing a public administration's decision (determina in Italian) and count the number of times a specific set of norms are mentioned in the text.

The test suite consists of two test methods: `test_check_norme` and `test_init_test_set_text`.

- `test_check_norme`: This method tests the `check_norme` method of the `Determina` class, which is expected to return a string in the format "Non rispettati: X, Rispettati: Y" where X is the number of norms not respected and Y is the number of norms respected in the text.
- `test_init` and `test_set_text`: These methods test the initial state of the `text` attribute of the `Determina` class and the setting of the `text` attribute, respectively. They ensure that the `text` attribute is initially `None` and can be set to a given value.  # test the initial state of the text attribute and the setting of the text attribute.  # test the setting of the text attribute  # test the initial state of the text attribute  # test the setting of the text attribute  # test the initial state of the text attribute  # test the setting of the text attribute  # test the initial state of the text attribute  # test the setting of the text attribute  # test the initial state of the text attribute  # test the setting of the text attribute  # test the initial state
                